/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/reset.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"                                      // Source key-labels.

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.

#define BT0         BT_SEL 0
#define BT1         BT_SEL 1
#define BT2         BT_SEL 2
#define BT3         BT_SEL 3
#define BT4         BT_SEL 4

/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

/ {
      conditional_layers {
        compatible = "zmk,conditional-layers";
        super_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "";

            bindings = <
&kp Q        &kp W        &kp E        &kp R         &kp T           &kp Y      &kp U         &kp I         &kp O        &kp P
&hml LGUI A  &hml LALT S  &hml LSHFT D &hml LCTRL F  &kp G           &kp H      &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L  &hmr RGUI SEMI
&kp Z        &kp X        &kp C        &kp V         &kp B           &kp N      &kp M         &kp COMMA     &kp DOT      &kp FSLH
                          &kp LSHFT    &kp BSPC      &lt 1 DEL       &lt 2 RET  &kp SPC       &kp TAB
            >;
        };

        lower_layer {
            display-name = "LOW";

            bindings = <
&kp TILDE  &kp LT     &kp GT    &kp LBRC    &kp RBRC        &kp MINUS &kp N7    &kp N8    &kp N9    &kp FSLH
&kp HASH   &kp LBKT   &kp RBKT  &kp LPAR    &kp RPAR        &kp PLUS  &kp N4    &kp N5    &kp N6    &kp STAR
&kp PRCNT  &kp AMPS   &kp AT    &kp CARET   &kp DLLR        &kp DOT   &kp N1    &kp N2    &kp N3    &kp EQUAL
                      &trans    &trans      &trans          &trans    &kp N0    &trans
            >;
        };

        raise_layer {
            display-name = "RAISE";

            bindings = <
&kp GRAVE &trans    &trans     &trans    &trans       &kp HOME   &kp PG_DN  &kp PG_UP &kp END     &none
&kp MINUS &kp UNDER &kp BSLH   &kp EXCL  &kp PIPE     &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT   &none
&trans    &trans    &trans     &trans    &trans       &trans     &kp C_PREV &kp C_PP  &kp C_NEXT  &none
                    &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        super_layer {
            display-name = "SUPER";

            bindings = <
&bt BT_CLR    &trans    &trans     &trans    &trans       &trans     &kp F7    &kp F8    &kp F9  &kp F10
&bt BT4       &bt BT3   &bt BT2    &bt BT1   &bt BT0      &trans     &kp F4    &kp F5    &kp F6  &kp F11
&trans        &trans    &trans     &trans    &trans       &trans     &kp F1    &kp F2    &kp F3  &kp F12
                        &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        extra_2 {
            status = "reserved";
        };

        extra_3 {
            status = "reserved";
        };
    };
};
