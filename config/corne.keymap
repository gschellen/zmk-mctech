/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/reset.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"                                      // Source key-labels.

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.

#define BT0         BT_SEL 0
#define BT1         BT_SEL 1
#define BT2         BT_SEL 2
#define BT3         BT_SEL 3
#define BT4         BT_SEL 4

/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)
// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};
 
/ {
      conditional_layers {
        compatible = "zmk,conditional-layers";
        super_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "";

            bindings = <
&none &kp Q        &kp W        &kp E         &kp R         &kp T           &kp Y      &kp U         &kp I         &kp O        &kp P          &none
&none &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G           &kp H      &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L  &hmr RGUI SQT  &none
&none &kp Z        &kp X        &kp C         &kp V         &kp B           &kp N      &kp M         &comma_morph  &dot_morph   &kp FSLH       &none
                                &magic_shift  &kp BSPC      &lt 1 DEL       &lt 2 RET  &kp SPC       &kp TAB
            >;
        };

        lower_layer {
            display-name = "LOW";

            bindings = <
&none &kp TILDE  &kp LT     &kp GT    &kp LBRC    &kp RBRC        &kp MINUS &kp N7    &kp N8    &kp N9    &kp FSLH  &none
&none &kp HASH   &kp LBKT   &kp RBKT  &kp LPAR    &kp RPAR        &kp PLUS  &kp N4    &kp N5    &kp N6    &kp STAR  &none
&none &kp PRCNT  &kp AMPS   &kp AT    &kp CARET   &kp DLLR        &kp DOT   &kp N1    &kp N2    &kp N3    &kp EQUAL &none
                            &trans    &trans      &trans          &trans    &kp N0    &trans
            >;
        };

        raise_layer {
            display-name = "RAISE";

            bindings = <
&none &kp ESC   &trans    &trans     &trans    &trans       &kp HOME   &kp PG_DN  &kp PG_UP &kp END     &kp C_MUTE     &none
&none &kp MINUS &kp UNDER &kp BSLH   &kp EXCL  &kp PIPE     &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT   &kp C_VOL_UP   &none
&none &kp GRAVE &trans    &trans     &trans    &trans       &trans     &kp C_PREV &kp C_PP  &kp C_NEXT  &kp C_VOL_DOWN &none
                          &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        super_layer {
            display-name = "SUPER";

            bindings = <
&none &bt BT_CLR    &trans    &trans     &trans    &trans       &trans     &kp F7    &kp F8    &kp F9  &kp F10 &none
&none &bt BT4       &bt BT3   &bt BT2    &bt BT1   &bt BT0      &trans     &kp F4    &kp F5    &kp F6  &kp F11 &none
&none &trans        &trans    &trans     &trans    &trans       &trans     &kp F1    &kp F2    &kp F3  &kp F12 &none
                              &trans     &trans    &trans       &trans     &trans    &trans
            >;
        };

        extra_2 {
            status = "reserved";
        };

        extra_3 {
            status = "reserved";
        };
    };
};
